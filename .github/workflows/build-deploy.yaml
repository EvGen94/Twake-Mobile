on:
  push:
    tags:
      - "*.*.*"

name: Build and deploy on stores

jobs:
  analyze-and-test:
    name: Analyze and test the code
    uses: ./.github/workflows/analyze-and-test.yaml

  build-and-deploy-android:
    name: Build and deploy to Play Store
    needs:
      - analyze-and-test
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # We use the pubspec as the cache key to detect dependencies changes
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "2.10.x"
          channel: "stable"
          cache: true
          cache-key: deps-${{ hashFiles('pubspec.lock') }} # optional, change this to force refresh cache
          cache-path: ${{ runner.tool_cache }}/flutter # optional, change this to specify the cache path

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin" # See 'Supported distributions' for available options
          java-version: "11"

      # Taken from https://github.com/flutter/gallery/blob/main/.github/workflows/release_deploy_play_store.yml
      - name: Setup keystore
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY_BASE64" | base64 --decode > app/android.jks
          echo "$GOOGLE_SERVICES_JSON" > app/google-services.json
          echo "$PLAY_STORE_KEY_INFO_BASE64" | base64 --decode > key.properties
        env:
          PLAY_STORE_UPLOAD_KEY_BASE64: ${{ secrets.PLAY_STORE_UPLOAD_KEY_BASE64 }}
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
          PLAY_STORE_KEY_INFO_BASE64: ${{ secrets.PLAY_STORE_KEY_INFO_BASE64 }}
        working-directory: android

      - name: Setup environment variables
        run: |
          echo "CAPTCHA_TOKEN=${{ secrets.CAPTCHA_TOKEN }}" >> .env
          echo "API_KEY=${{ secrets.API_KEY }}" >> .firebase.env
          echo "APP_ID=${{ secrets.APP_ID }}" >> .firebase.env
          echo "MESSAGE_SENDER_ID=${{ secrets.MESSAGE_SENDER_ID }}" >> .firebase.env
          echo "PROJECT_ID=${{ secrets.PROJECT_ID }}" >> .firebase.env

      - name: Build the app
        run: flutter build appbundle -v --release --build-number=$(( 50 + $GITHUB_RUN_NUMBER )) --build-name=$GITHUB_REF_NAME

      - name: Deploy the app to the Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_CONFIG_JSON }}
          packageName: "com.twake.twake"
          releaseFiles: "build/app/outputs/bundle/release/app-release.aab"
          track: alpha
          status: completed

  build-and-deploy-ios:
    name: Build and deploy to App Store
    needs:
      - analyze-and-test
    runs-on: macos-latest
    environment: prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # We use the pubspec as the cache key to detect dependencies changes
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "2.10.x"
          channel: "stable"
          cache: true
          cache-key: deps-${{ hashFiles('pubspec.lock') }} # optional, change this to force refresh cache
          cache-path: ${{ runner.tool_cache }}/flutter # optional, change this to specify the cache path

      - name: Setup Google services
        run: |
          echo "$GOOGLE_SERVICES_PLIST" > Runner/GoogleService-Info.plist
        env:
          GOOGLE_SERVICES_PLIST: ${{ secrets.GOOGLE_SERVICES_PLIST }}
        working-directory: ios

      - name: Setup environment variables
        run: |
          echo "CAPTCHA_TOKEN=${{ secrets.CAPTCHA_TOKEN }}" >> .env
          echo "API_KEY=${{ secrets.API_KEY }}" >> .firebase.env
          echo "APP_ID=${{ secrets.APP_ID }}" >> .firebase.env
          echo "MESSAGE_SENDER_ID=${{ secrets.MESSAGE_SENDER_ID }}" >> .firebase.env
          echo "PROJECT_ID=${{ secrets.PROJECT_ID }}" >> .firebase.env
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.CERTIFICATE_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.PROVISION_PROFILE_BASE64 }}
          SHAREEXT_PROVISION_PROFILE_BASE64: ${{ secrets.SHAREEXT_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          EXPORT_OPTIONS: ${{ secrets.EXPORT_OPTIONS }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          SHAREEXT_PP_PATH=$RUNNER_TEMP/shareext_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          echo -n "$SHAREEXT_PROVISION_PROFILE_BASE64" | base64 --decode --output $SHAREEXT_PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          cp $SHAREEXT_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          # create export options
          echo -n "$EXPORT_OPTIONS" > ExportOptions.plist

      - name: Build the app
        run: flutter build ipa -v --export-options-plist=ExportOptions.plist --release --build-number=$(( 50 + $GITHUB_RUN_NUMBER )) --build-name=$GITHUB_REF_NAME

      - name: Upload the app to TestFlight
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        run: xcrun altool --upload-app -f "build/ios/ipa/Twake.ipa" -t ios -u $APPLE_ID -p $APPLE_PASSWORD
